{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/vaisan/Downloads/paw-centre/pages/shop/shop.jsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ShopDisplay from '../../components/shop/ShopDisplay'; // import {loadFirebase} from '../../lib/database/config/fbConfig.js';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nvar Shop = /*#__PURE__*/function (_React$Component) {\n  _inherits(Shop, _React$Component);\n\n  var _super = _createSuper(Shop);\n\n  function Shop(props) {\n    _classCallCheck(this, Shop);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(Shop, [{\n    key: \"render\",\n    //gets initial data from firestore and stores it into props\n    // static async getInitialProps() {\n    //   let firebase = await loadFirebase();\n    //   let result = await new Promise((resolve, reject) => {\n    //     firebase\n    //       .firestore()\n    //       .collection('products')\n    //       .get()\n    //       .then((snapshot) => {\n    //         let data = [];\n    //         snapshot.forEach((doc) => {\n    //           data.push(\n    //             Object.assign(\n    //               {\n    //                 id: doc.id\n    //               },\n    //               doc.data()\n    //             )\n    //           );\n    //         });\n    //         resolve(data);\n    //       })\n    //       .catch((error) => {\n    //         console.log(error);\n    //         reject([]);\n    //       });\n    //   });\n    //   return { products: result };\n    // }\n    value: function render() {\n      // const products = this.props.products;\n      // console.log('products', products);\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, \"Shop route page\", __jsx(ShopDisplay, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var firestore;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                firestore = this.context.store.firestore;\n                firestore.get('products');\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Shop;\n}(React.Component);\n\n_defineProperty(Shop, \"contextTypes\", {\n  store: PropTypes.object.isRequired\n});\n\nexport default connect(function (state) {\n  return {\n    products: state.firestore.ordered.products\n  };\n})(Shop);","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/pages/shop/shop.jsx"],"names":["React","ShopDisplay","PropTypes","connect","Shop","props","firestore","context","store","get","Component","object","isRequired","state","products","ordered"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mCAAxB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;;IAGMC,I;;;;;AACJ,gBAAYC,KAAZ,EAAkB;AAAA;;AAAA,6BACVA,KADU;AAEjB;;;;AASD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACP;AACA;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;;;;;;;AA1CSC,gBAAAA,S,GAAc,KAAKC,OAAL,CAAaC,K,CAA3BF,S;AACRA,gBAAAA,SAAS,CAACG,GAAV,CAAc,UAAd;;;;;;;;;;;;;;;;;;;EAVeT,KAAK,CAACU,S;;gBAAnBN,I,kBAIkB;AACpBI,EAAAA,KAAK,EAAEN,SAAS,CAACS,MAAV,CAAiBC;AADJ,C;;AAmDxB,eAAeT,OAAO,CAAC,UAAAU,KAAK;AAAA,SAAK;AAC/BC,IAAAA,QAAQ,EAAED,KAAK,CAACP,SAAN,CAAgBS,OAAhB,CAAwBD;AADH,GAAL;AAAA,CAAN,CAAP,CAEXV,IAFW,CAAf","sourcesContent":["import React from 'react';\nimport ShopDisplay from '../../components/shop/ShopDisplay';\n// import {loadFirebase} from '../../lib/database/config/fbConfig.js';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n\nclass Shop extends React.Component {\n  constructor(props){\n    super(props);\n  }\n  static contextTypes = {\n    store: PropTypes.object.isRequired\n  };\n\n  static async getInitialProps() {\n    const { firestore } = this.context.store;\n    firestore.get('products')\n  }\n  //gets initial data from firestore and stores it into props\n  // static async getInitialProps() {\n  //   let firebase = await loadFirebase();\n  //   let result = await new Promise((resolve, reject) => {\n  //     firebase\n  //       .firestore()\n  //       .collection('products')\n  //       .get()\n  //       .then((snapshot) => {\n  //         let data = [];\n  //         snapshot.forEach((doc) => {\n  //           data.push(\n  //             Object.assign(\n  //               {\n  //                 id: doc.id\n  //               },\n  //               doc.data()\n  //             )\n  //           );\n  //         });\n  //         resolve(data);\n  //       })\n  //       .catch((error) => {\n  //         console.log(error);\n  //         reject([]);\n  //       });\n  //   });\n  //   return { products: result };\n  // }\n\n  render() {\n    // const products = this.props.products;\n    // console.log('products', products);\n    return (\n      <div>\n        Shop route page\n        <ShopDisplay />\n      </div>\n    );\n  }\n}\n\n\nexport default connect(state => ({\n  products: state.firestore.ordered.products\n}))(Shop);\n"]},"metadata":{},"sourceType":"module"}