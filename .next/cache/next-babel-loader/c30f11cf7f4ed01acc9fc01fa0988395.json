{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'; // create a makeStore function\n\nvar initialState = {}; // const middleware = [thunk];\n\nexport var store = function store() {\n  return createStore(rootReducer, initialState, compose(applyMiddleware(thunk.withExtraArgument({\n    getFirebase: getFirebase,\n    getFirestore: getFirestore\n  })), reduxFirestore(fbConfig)));\n};\nvar rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n};\nvar rrfProps = {\n  firebase: firebase,\n  config: rfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance: createFirestoreInstance\n};\nvar createStoreWithFirebase = compose(reduxFirestore(firebase, rrfProps))(createStore); // export an assembled wrapper\n\nexport var wrapper = createWrapper(store, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/store/store.js"],"names":["createStore","applyMiddleware","compose","createWrapper","rootReducer","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","getFirebase","fbConfig","firebase","initialState","store","withExtraArgument","rfConfig","userProfile","useFirestoreForProfile","rrfProps","config","dispatch","createStoreWithFirebase","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,WAArC,QAAwD,sBAAxD;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CACA;;AAEA,IAAMC,YAAY,GAAG,EAArB,C,CACA;;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAMd,WAAW,CAACI,WAAD,EACpCS,YADoC,EAEpCX,OAAO,CACHD,eAAe,CAACI,KAAK,CAACU,iBAAN,CAAwB;AAAEL,IAAAA,WAAW,EAAXA,WAAF;AAAeF,IAAAA,YAAY,EAAZA;AAAf,GAAxB,CAAD,CADZ,EAEHD,cAAc,CAACI,QAAD,CAFX,CAF6B,CAAjB;AAAA,CAAd;AAQP,IAAMK,QAAQ,GAAG;AACfC,EAAAA,WAAW,EAAE,OADE;AAEfC,EAAAA,sBAAsB,EAAE;AAFT,CAAjB;AAIA,IAAMC,QAAQ,GAAG;AACfP,EAAAA,QAAQ,EAARA,QADe;AAEfQ,EAAAA,MAAM,EAAEJ,QAFO;AAGfK,EAAAA,QAAQ,EAAEP,KAAK,CAACO,QAHD;AAIff,EAAAA,uBAAuB,EAAvBA;AAJe,CAAjB;AAOA,IAAMgB,uBAAuB,GAAGpB,OAAO,CACrCK,cAAc,CAACK,QAAD,EAAWO,QAAX,CADuB,CAAP,CAE9BnB,WAF8B,CAAhC,C,CAIA;;AACA,OAAO,IAAMuB,OAAO,GAAGpB,aAAa,CAACW,KAAD,EAAQ;AAAEU,EAAAA,KAAK,EAAE;AAAT,CAAR,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'\n// create a makeStore function\n\nconst initialState = {};\n// const middleware = [thunk];\n\nexport const store = () => createStore(rootReducer,\n  initialState,\n  compose(\n      applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n      reduxFirestore(fbConfig)\n  )\n);\n\nconst rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}\nconst rrfProps = {\n  firebase,\n  config: rfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n} \n\nconst createStoreWithFirebase = compose(\n  reduxFirestore(firebase, rrfProps)\n)(createStore)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(store, { debug: true });\n"]},"metadata":{},"sourceType":"module"}