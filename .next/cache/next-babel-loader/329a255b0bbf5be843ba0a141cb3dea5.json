{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { GET_DATA_SERVER, GET_DATA_CLIENT, GET_FIRESTORE_DATA } from '../types/types';\nimport { loadFirebase } from '../../lib/database/config/fbConfig'; // const getDataClient = async (dispatch, getState, { getFirestore }) => {\n//   const firestore = await getFirestore();\n//   firestore\n//     .collection('products')\n//     .get()\n//     .then((data) => {\n//       dispatch({\n//         type: GET_DATA_CLIENT,\n//         payload: data\n//       });\n//     });\n// };\n// export default getDataClient;\n\nvar getFirestoreData = function getFirestoreData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n      var firebase, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return loadFirebase();\n\n            case 2:\n              firebase = _context.sent;\n              _context.next = 5;\n              return new Promise(function (resolve, reject) {\n                firebase.firestore().collection('products').get().then(function (snapshot) {\n                  var data = [];\n                  snapshot.forEach(function (doc) {\n                    data.push(Object.assign({\n                      id: doc.id\n                    }, doc.data()));\n                  });\n                  resolve(data);\n                })[\"catch\"](function (error) {\n                  console.log(error);\n                  reject([]);\n                });\n              });\n\n            case 5:\n              result = _context.sent;\n              dispatch({\n                type: 'GET_FIRESTORE_DATA',\n                result: result\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport default getFirestoreData;","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/actions/storeActions.js"],"names":["Router","axios","GET_DATA_SERVER","GET_DATA_CLIENT","GET_FIRESTORE_DATA","loadFirebase","getFirestoreData","dispatch","getState","firebase","Promise","resolve","reject","firestore","collection","get","then","snapshot","data","forEach","doc","push","Object","assign","id","error","console","log","result","type"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,kBAA3C,QAAqE,gBAArE;AACA,SAAQC,YAAR,QAA2B,oCAA3B,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B;AAAA,wEAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEgBH,YAAY,EAF5B;;AAAA;AAEDI,cAAAA,QAFC;AAAA;AAAA,qBAGc,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClDH,gBAAAA,QAAQ,CACLI,SADH,GAEGC,UAFH,CAEc,UAFd,EAGGC,GAHH,GAIGC,IAJH,CAIQ,UAACC,QAAD,EAAc;AAClB,sBAAIC,IAAI,GAAG,EAAX;AACAD,kBAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,GAAD,EAAS;AACxBF,oBAAAA,IAAI,CAACG,IAAL,CACEC,MAAM,CAACC,MAAP,CACE;AACEC,sBAAAA,EAAE,EAAEJ,GAAG,CAACI;AADV,qBADF,EAIEJ,GAAG,CAACF,IAAJ,EAJF,CADF;AAQD,mBATD;AAUAP,kBAAAA,OAAO,CAACO,IAAD,CAAP;AACD,iBAjBH,WAkBS,UAACO,KAAD,EAAW;AAChBC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAb,kBAAAA,MAAM,CAAC,EAAD,CAAN;AACD,iBArBH;AAsBD,eAvBkB,CAHd;;AAAA;AAGDgB,cAAAA,MAHC;AA2BLrB,cAAAA,QAAQ,CAAC;AAACsB,gBAAAA,IAAI,EAAE,oBAAP;AAA6BD,gBAAAA,MAAM,EAANA;AAA7B,eAAD,CAAR;;AA3BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AA6BD,CA9BD;;AAgCA,eAAetB,gBAAf","sourcesContent":["import Router from 'next/router';\nimport axios from 'axios';\nimport { GET_DATA_SERVER, GET_DATA_CLIENT, GET_FIRESTORE_DATA } from '../types/types';\nimport {loadFirebase} from '../../lib/database/config/fbConfig';\n\n\n// const getDataClient = async (dispatch, getState, { getFirestore }) => {\n//   const firestore = await getFirestore();\n//   firestore\n//     .collection('products')\n//     .get()\n//     .then((data) => {\n//       dispatch({\n//         type: GET_DATA_CLIENT,\n//         payload: data\n//       });\n//     });\n// };\n\n// export default getDataClient;\n\nconst getFirestoreData = () => {\n  return async (dispatch, getState) => {\n    //make async call to db\n    let firebase = await loadFirebase();\n    let result = await new Promise((resolve, reject) => {\n      firebase\n        .firestore()\n        .collection('products')\n        .get()\n        .then((snapshot) => {\n          let data = [];\n          snapshot.forEach((doc) => {\n            data.push(\n              Object.assign(\n                {\n                  id: doc.id\n                },\n                doc.data()\n              )\n            );\n          });\n          resolve(data);\n        })\n        .catch((error) => {\n          console.log(error);\n          reject([]);\n        });\n    });\n    dispatch({type: 'GET_FIRESTORE_DATA', result})\n  }\n}\n\nexport default getFirestoreData;"]},"metadata":{},"sourceType":"module"}