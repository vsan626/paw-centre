{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore'; // create a makeStore function\n\nconst initialState = {}; // const middleware = [thunk];\n// export const store = () => createStore(rootReducer,\n//   initialState,\n//   compose(\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//       reduxFirestore(fbConfig)\n//   )\n// );\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(fbConfig);\n}\n\nfirebase.firestore();\nconst rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}; // const rrfProps = {\n//   firebase,\n//   config: rfConfig,\n//   dispatch: store.dispatch,\n//   createFirestoreInstance,\n// } \n\nconst createStoreWithFirebase = compose(applyMiddleware(thunk.withExtraArgument({\n  getFirebase,\n  getFirestore\n})), reduxFirestore(firebase, rfConfig))(createStore);\n\nconst store = () => createStoreWithFirebase(rootReducer, initialState); // export an assembled wrapper\n\n\nexport const wrapper = createWrapper(store, {\n  debug: true\n});\nexport default store;","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/index.js"],"names":["createStore","applyMiddleware","compose","createWrapper","rootReducer","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","getFirebase","fbConfig","firebase","initialState","apps","length","initializeApp","firestore","rfConfig","userProfile","useFirestoreForProfile","createStoreWithFirebase","withExtraArgument","store","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,WAArC,QAAwD,sBAAxD;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP,C,CAEA;;AAEA,MAAMC,YAAY,GAAG,EAArB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,IAAI,CAACD,QAAQ,CAACE,IAAT,CAAcC,MAAnB,EAA2B;AACzBH,EAAAA,QAAQ,CAACI,aAAT,CAAuBL,QAAvB;AACD;;AAEHC,QAAQ,CAACK,SAAT;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,WAAW,EAAE,OADE;AAEfC,EAAAA,sBAAsB,EAAE;AAFT,CAAjB,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,uBAAuB,GAAGnB,OAAO,CACrCD,eAAe,CAACI,KAAK,CAACiB,iBAAN,CAAwB;AAAEZ,EAAAA,WAAF;AAAeF,EAAAA;AAAf,CAAxB,CAAD,CADsB,EAErCD,cAAc,CAACK,QAAD,EAAWM,QAAX,CAFuB,CAAP,CAG9BlB,WAH8B,CAAhC;;AAKA,MAAMuB,KAAK,GAAG,MAAMF,uBAAuB,CAACjB,WAAD,EAAcS,YAAd,CAA3C,C,CAEA;;;AACA,OAAO,MAAMW,OAAO,GAAGrB,aAAa,CAACoB,KAAD,EAAQ;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAAR,CAA7B;AACP,eAAeF,KAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\n// create a makeStore function\n\nconst initialState = {};\n// const middleware = [thunk];\n\n// export const store = () => createStore(rootReducer,\n//   initialState,\n//   compose(\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//       reduxFirestore(fbConfig)\n//   )\n// );\n  if (!firebase.apps.length) {\n    firebase.initializeApp(fbConfig);\n  }\n\nfirebase.firestore();\n\nconst rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}\n// const rrfProps = {\n//   firebase,\n//   config: rfConfig,\n//   dispatch: store.dispatch,\n//   createFirestoreInstance,\n// } \n\nconst createStoreWithFirebase = compose(\n  applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n  reduxFirestore(firebase, rfConfig)\n)(createStore)\n\nconst store = () => createStoreWithFirebase(rootReducer, initialState)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(store, { debug: true });\nexport default store\n"]},"metadata":{},"sourceType":"module"}