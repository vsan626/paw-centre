{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig'; // create a makeStore function\n\nvar initialState = {}; // const middleware = [thunk];\n\nexport var store = function store() {\n  return createStore(rootReducer, compose(applyMiddleware(thunk.withExtraArgument({\n    getFirebase: getFirebase,\n    getFirestore: getFirestore\n  })), reduxFirestore(fbConfig)));\n};\nvar rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n};\nvar rrfProps = {\n  firebase: firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance: createFirestoreInstance\n}; // export an assembled wrapper\n\nexport var wrapper = createWrapper(store, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/store/store.js"],"names":["createStore","applyMiddleware","compose","createWrapper","rootReducer","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","getFirebase","fbConfig","initialState","store","withExtraArgument","rrfConfig","userProfile","useFirestoreForProfile","rrfProps","firebase","config","dispatch","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,WAArC,QAAwD,sBAAxD;AACA,OAAOC,QAAP,MAAqB,oCAArB,C,CACA;;AAEA,IAAMC,YAAY,GAAG,EAArB,C,CACA;;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,SAAMb,WAAW,CAACI,WAAD,EACpCF,OAAO,CACHD,eAAe,CAACI,KAAK,CAACS,iBAAN,CAAwB;AAAEJ,IAAAA,WAAW,EAAXA,WAAF;AAAeF,IAAAA,YAAY,EAAZA;AAAf,GAAxB,CAAD,CADZ,EAEHD,cAAc,CAACI,QAAD,CAFX,CAD6B,CAAjB;AAAA,CAAd;AAOP,IAAMI,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAE,OADG;AAEhBC,EAAAA,sBAAsB,EAAE;AAFR,CAAlB;AAIA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EAARA,QADe;AAEfC,EAAAA,MAAM,EAAEL,SAFO;AAGfM,EAAAA,QAAQ,EAAER,KAAK,CAACQ,QAHD;AAIff,EAAAA,uBAAuB,EAAvBA;AAJe,CAAjB,C,CAUA;;AACA,OAAO,IAAMgB,OAAO,GAAGnB,aAAa,CAACU,KAAD,EAAQ;AAAEU,EAAAA,KAAK,EAAE;AAAT,CAAR,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\n// create a makeStore function\n\nconst initialState = {};\n// const middleware = [thunk];\n\nexport const store = () => createStore(rootReducer,\n  compose(\n      applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n      reduxFirestore(fbConfig)\n  )\n);\n\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n}\n\n\n\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(store, { debug: true });\n"]},"metadata":{},"sourceType":"module"}