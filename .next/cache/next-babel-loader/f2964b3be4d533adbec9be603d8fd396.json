{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport storeReducers from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig'; // create a makeStore function\n// const initialState = {};\n// const middleware = [thunk];\n\nvar makeStore = function makeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return createStore(storeReducers, // initialState,\n  compose(applyMiddleware(thunk.withExtraArgument({\n    getFirebase: getFirebase,\n    getFirestore: getFirestore\n  })), reduxFirestore(fbConfig), reactReduxFirebase(fbConfig)));\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/store/store.js"],"names":["createStore","applyMiddleware","compose","createWrapper","storeReducers","thunk","reduxFirestore","getFirestore","reactReduxFirebase","getFirebase","fbConfig","makeStore","initialState","withExtraArgument","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,sBAAhD;AACA,OAAOC,QAAP,MAAqB,oCAArB,C,CACA;AAEA;AACA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AACvC,SAAOZ,WAAW,CAChBI,aADgB,EAEhB;AACAF,EAAAA,OAAO,CACLD,eAAe,CAACI,KAAK,CAACQ,iBAAN,CAAwB;AAAEJ,IAAAA,WAAW,EAAXA,WAAF;AAAeF,IAAAA,YAAY,EAAZA;AAAf,GAAxB,CAAD,CADV,EAELD,cAAc,CAACI,QAAD,CAFT,EAGLF,kBAAkB,CAACE,QAAD,CAHb,CAHS,CAAlB;AASD,CAVD,C,CAYA;;;AACA,OAAO,IAAMI,OAAO,GAAGX,aAAa,CAACQ,SAAD,EAAY;AAAEI,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport storeReducers from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase'\nimport fbConfig from '../../lib/database/config/fbConfig'\n// create a makeStore function\n\n// const initialState = {};\n// const middleware = [thunk];\n\nconst makeStore = (initialState = {}) => {\n  return createStore(\n    storeReducers,\n    // initialState,\n    compose(\n      applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n      reduxFirestore(fbConfig),\n      reactReduxFirebase(fbConfig)\n    )\n  );\n};\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}