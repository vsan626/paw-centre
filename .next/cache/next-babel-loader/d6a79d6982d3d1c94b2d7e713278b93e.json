{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'; // create a makeStore function\n\nconst initialState = {}; // const middleware = [thunk];\n// export const store = () => createStore(rootReducer,\n//   initialState,\n//   compose(\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//       reduxFirestore(fbConfig)\n//   )\n// );\n\nfirebase.initializeApp(fbConfig);\nfirebase.firestore();\nconst rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n};\nconst rrfProps = {\n  firebase,\n  config: rfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance\n};\nconst createStoreWithFirebase = compose(reduxFirestore(firebase, rrfProps))(createStore);\nconst store = createStoreWithFirebase(rootReducer, initialState); // export an assembled wrapper\n\nexport const wrapper = createWrapper(store, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/store/store.js"],"names":["createStore","applyMiddleware","compose","createWrapper","rootReducer","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","getFirebase","fbConfig","firebase","initialState","initializeApp","firestore","rfConfig","userProfile","useFirestoreForProfile","rrfProps","config","dispatch","store","createStoreWithFirebase","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,WAArC,QAAwD,sBAAxD;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,cAArB,C,CACA;;AAEA,MAAMC,YAAY,GAAG,EAArB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,QAAQ,CAACE,aAAT,CAAuBH,QAAvB;AAEAC,QAAQ,CAACG,SAAT;AAEA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,WAAW,EAAE,OADE;AAEfC,EAAAA,sBAAsB,EAAE;AAFT,CAAjB;AAIA,MAAMC,QAAQ,GAAG;AACfP,EAAAA,QADe;AAEfQ,EAAAA,MAAM,EAAEJ,QAFO;AAGfK,EAAAA,QAAQ,EAAEC,KAAK,CAACD,QAHD;AAIff,EAAAA;AAJe,CAAjB;AAOA,MAAMiB,uBAAuB,GAAGrB,OAAO,CACrCK,cAAc,CAACK,QAAD,EAAWO,QAAX,CADuB,CAAP,CAE9BnB,WAF8B,CAAhC;AAIA,MAAMsB,KAAK,GAAGC,uBAAuB,CAACnB,WAAD,EAAcS,YAAd,CAArC,C,CAEA;;AACA,OAAO,MAAMW,OAAO,GAAGrB,aAAa,CAACmB,KAAD,EAAQ;AAAEG,EAAAA,KAAK,EAAE;AAAT,CAAR,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport fbConfig from '../../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'\n// create a makeStore function\n\nconst initialState = {};\n// const middleware = [thunk];\n\n// export const store = () => createStore(rootReducer,\n//   initialState,\n//   compose(\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//       reduxFirestore(fbConfig)\n//   )\n// );\n\nfirebase.initializeApp(fbConfig)\n\nfirebase.firestore();\n\nconst rfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n}\nconst rrfProps = {\n  firebase,\n  config: rfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n} \n\nconst createStoreWithFirebase = compose(\n  reduxFirestore(firebase, rrfProps)\n)(createStore)\n\nconst store = createStoreWithFirebase(rootReducer, initialState)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(store, { debug: true });\n"]},"metadata":{},"sourceType":"module"}