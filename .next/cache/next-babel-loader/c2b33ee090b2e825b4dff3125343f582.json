{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport storeReducers from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore'; // create a makeStore function\n// const initialState = {};\n// const middleware = [thunk];\n\nvar makeStore = function makeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return createStore(storeReducers, initialState, compost(applyMiddleware(thunk.withExtraArgument({\n    getFirestore: getFirestore\n  })), reduxFirestore()));\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/store/store.js"],"names":["createStore","applyMiddleware","compose","createWrapper","storeReducers","thunk","reduxFirestore","getFirestore","makeStore","initialState","compost","withExtraArgument","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,iBAA7C,C,CACA;AAEA;AACA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;AACvC,SAAOT,WAAW,CAChBI,aADgB,EAEhBK,YAFgB,EAGhBC,OAAO,CACLT,eAAe,CAACI,KAAK,CAACM,iBAAN,CAAwB;AAAEJ,IAAAA,YAAY,EAAZA;AAAF,GAAxB,CAAD,CADV,EAELD,cAAc,EAFT,CAHS,CAAlB;AAQD,CATD,C,CAWA;;;AACA,OAAO,IAAMM,OAAO,GAAGT,aAAa,CAACK,SAAD,EAAY;AAAEK,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport storeReducers from '../reducers/index';\nimport thunk from 'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\n// create a makeStore function\n\n// const initialState = {};\n// const middleware = [thunk];\n\nconst makeStore = (initialState = {}) => {\n  return createStore(\n    storeReducers,\n    initialState,\n    compost(\n      applyMiddleware(thunk.withExtraArgument({ getFirestore })),\n      reduxFirestore()\n    )\n  );\n};\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}