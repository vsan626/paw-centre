{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_DATA_SERVER, GET_DATA_CLIENT, GET_FIRESTORE_DATA } from '../types/types';\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  products: [{\n    id: '1',\n    name: 'chew toy',\n    price: 55\n  }, {\n    id: '2',\n    name: 'vest',\n    price: 80\n  }, {\n    id: '3',\n    name: 'leash',\n    price: 60\n  }]\n}; // create your reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/reducers/storeReducers.js"],"names":["GET_DATA_SERVER","GET_DATA_CLIENT","GET_FIRESTORE_DATA","HYDRATE","initialState","products","id","name","price","reducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,kBAA3C,QAAqE,gBAArE;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,CACR;AAACC,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,IAAI,EAAE,UAAhB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GADQ,EAER;AAACF,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,IAAI,EAAE,MAAhB;AAAwBC,IAAAA,KAAK,EAAE;AAA/B,GAFQ,EAGR;AAACF,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,IAAI,EAAE,OAAhB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAHQ;AADS,CAArB,C,CAQA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,OAAL;AACE,6CAAYO,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;AAFJ;;AAIE,SAAOH,KAAP;AACH,CAND;;AAQA,eAAeD,OAAf","sourcesContent":["import { GET_DATA_SERVER, GET_DATA_CLIENT, GET_FIRESTORE_DATA } from '../types/types';\nimport { HYDRATE } from 'next-redux-wrapper';\n\nconst initialState = {\n  products: [\n    {id: '1', name: 'chew toy', price: 55},\n    {id: '2', name: 'vest', price: 80},\n    {id: '3', name: 'leash', price: 60}\n  ]\n};\n\n// create your reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return { ...state, ...action.payload };\n    }\n    return state;\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}