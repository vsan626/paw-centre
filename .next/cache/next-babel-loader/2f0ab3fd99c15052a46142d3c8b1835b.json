{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from './reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, reactReduxFirebase, getFirebase } from 'react-redux-firebase'; // import fbConfig from '../lib/database/config/fbConfig';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore'; // create a makeStore function\n// const initialState = {};\n// // const middleware = [thunk];\n// // export const store = () => createStore(rootReducer,\n// //   initialState,\n// //   compose(\n// //       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n// //       reduxFirestore(fbConfig)\n// //   )\n// // );\n//   if (!firebase.apps.length) {\n//     firebase.initializeApp(fbConfig);\n//   }\n// firebase.firestore();\n// const rfConfig = {\n//   userProfile: 'users',\n//   useFirestoreForProfile: true\n// }\n// // const rrfProps = {\n// //   firebase,\n// //   config: rfConfig,\n// //   dispatch: store.dispatch,\n// //   createFirestoreInstance,\n// // } \n// const createStoreWithFirebase = compose(\n//   applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//   reduxFirestore(firebase, rfConfig)\n// )(createStore)\n// const store = () => createStoreWithFirebase(rootReducer, initialState)\n\nconst store = createStore(rootReducer); // export an assembled wrapper\n\nexport const wrapper = createWrapper(store, {\n  debug: true\n});\nexport default store;","map":{"version":3,"sources":["/Users/vaisan/Downloads/paw-centre/redux/index.js"],"names":["createStore","applyMiddleware","compose","createWrapper","rootReducer","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","reactReduxFirebase","getFirebase","firebase","store","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,YAAlD,QAAsE,iBAAtE;AACA,SAASC,0BAAT,EAAqCC,kBAArC,EAAyDC,WAAzD,QAA4E,sBAA5E,C,CACA;;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP,C,CAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA,MAAMC,KAAK,GAAGb,WAAW,CAACI,WAAD,CAAzB,C,CAEA;;AACA,OAAO,MAAMU,OAAO,GAAGX,aAAa,CAACU,KAAD,EAAQ;AAAEE,EAAAA,KAAK,EAAE;AAAT,CAAR,CAA7B;AACP,eAAeF,KAAf","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport rootReducer from './reducers/index';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, reactReduxFirebase, getFirebase } from 'react-redux-firebase';\n// import fbConfig from '../lib/database/config/fbConfig';\nimport firebase from 'firebase/app'\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\n\n// create a makeStore function\n\n// const initialState = {};\n// // const middleware = [thunk];\n\n// // export const store = () => createStore(rootReducer,\n// //   initialState,\n// //   compose(\n// //       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n// //       reduxFirestore(fbConfig)\n// //   )\n// // );\n//   if (!firebase.apps.length) {\n//     firebase.initializeApp(fbConfig);\n//   }\n\n// firebase.firestore();\n\n// const rfConfig = {\n//   userProfile: 'users',\n//   useFirestoreForProfile: true\n// }\n// // const rrfProps = {\n// //   firebase,\n// //   config: rfConfig,\n// //   dispatch: store.dispatch,\n// //   createFirestoreInstance,\n// // } \n\n// const createStoreWithFirebase = compose(\n//   applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n//   reduxFirestore(firebase, rfConfig)\n// )(createStore)\n\n// const store = () => createStoreWithFirebase(rootReducer, initialState)\n\nconst store = createStore(rootReducer)\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(store, { debug: true });\nexport default store\n"]},"metadata":{},"sourceType":"module"}